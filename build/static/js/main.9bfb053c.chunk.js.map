{"version":3,"sources":["Assets/loading.gif","Face API/faceApi.js","Camera/Camera.js","App.js","icons.js","serviceWorker.js","index.js"],"names":["module","exports","result","detectFaces","image","a","imgSize","getBoundingClientRect","displaySize","width","height","faceapi","inputSize","faces","drawResults","canvas","results","type","tocrop","facecanvas","model","getContext","clearRect","resizedDetections","Jimp","read","then","crop","box","x","y","resize","bitmap","data","tf","mean","expandDims","div","reshape","output","predict","dataSync","undefined","expressions","max","reduce","b","Math","index","indexOf","l","String","round","drawOptions","lineWidth","label","DrawBox","draw","App","props","aspectRatio","window","innerWidth","innerHeight","className","style","screenshotFormat","audio","ref","camera","cameraCanvas","MODEL_URL","process","Promise","all","tinyFaceDetector","loadFromUri","console","log","loadModels","library","add","faVideo","faCamera","faSpinner","faAngry","faGrinTongueSquint","faGrimace","faGrin","faMeh","faSadTear","faSurprise","faMale","faFemale","faTimesCircle","useEffect","loadmodel","setisDownloadingModel","getResults","clearOverlay","current","ticking","setInterval","getFaces","clearInterval","video","src","getScreenshot","setoutput","setResult","save","warn","setmodelLoaded","useRef","useState","isDownloadingModel","textAlign","marginTop","loading","marginLeft","fontSize","align","id","display","Camera","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,qC,+QCmCvCC,E,+GApBSC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,yDACpBD,EADoB,oDAKnBE,EAAUF,EAAMG,wBAEK,KADrBC,EAAc,CAAEC,MAAOH,EAAQG,MAAOC,OAAQJ,EAAQI,SAC5CA,OAPS,iEAWLC,IAEhBP,EACA,IAAIO,IAAgC,CAAEC,UAAW,OAd5B,cAWnBC,EAXmB,yBAiBlBF,IAAsBE,EAAOL,IAjBX,4CAAH,sDAsBXM,EAAW,uCAAG,WAAOV,EAAOW,EAAQC,EAASC,EAAMC,EAAQC,EAAYC,GAAzD,mCAAAf,EAAA,2DACrBD,GAASW,GAAUC,GADE,oBAEjBV,EAAUF,EAAMG,wBAChBC,EAAc,CAAEC,MAAOH,EAAQG,MAAOC,OAAQJ,EAAQI,QAC5DC,IAAwBI,EAAQP,GAChCO,EAAOM,WAAW,MAAMC,UAAU,EAAG,EAAGP,EAAON,MAAOM,EAAOL,QAEnC,IAAtBF,EAAYC,MAPO,wBAQrBc,EAAoBZ,IAAsBK,EAASR,IAC7B,KACpBgB,IAAKC,KAAKP,GACPQ,MAAK,SAAAtB,GACJA,EAAMuB,KAAKJ,EAAkB,GAAGK,IAAIC,EAAGN,EAAkB,GAAGK,IAAIE,EAAGP,EAAkB,GAAGK,IAAInB,MAAOc,EAAkB,GAAGK,IAAIlB,QAC5HN,EAAM2B,OAAO,GAAI,IACjB3B,EAAQA,EAAM4B,OAAOC,KAKrB7B,GADAA,GADAA,GADAA,GADAA,EAAQ8B,IAAY9B,EAAO,CAAC,GAAI,GAAI,KACtB+B,KAAK,IACLC,WAAW,IACXC,IAAI,MACJC,QAAQ,CAAC,EAAG,GAAI,GAAI,IAClC,IAAIC,EAASnB,EAAMoB,QAAQpC,GAC3BmC,EAASA,EAAOE,WAChBvC,EAASqC,UAKEG,IAAXxC,IACEyC,EAAc,CAAC,oBAAW,kBAAa,iBAAU,oBAAa,yBAAW,qBAAc,2BAAe,0BAEtGC,EAAM1C,EAAO2C,QAAO,SAAUxC,EAAGyC,GACnC,OAAOC,KAAKH,IAAIvC,EAAGyC,MAGjBE,EAAQ9C,EAAO+C,QAAQL,GAE3BM,EAAIC,OAAOR,EAAYK,IAAU,IAAMG,OAAOJ,KAAKK,MAAY,IAANR,IAAc,KAGnEhB,EAAML,EAAkB,GAAGK,IAC3ByB,EAAc,CAClBC,UAAW,EACXC,MAAOL,GAEO,IAAIvC,IAAa6C,QAAQ5B,EAAKyB,GAEtCI,KAAK1C,IAIXQ,EAAkB,KACpBC,IAAKC,KAAKP,GACPQ,MAAK,SAAAtB,GACJA,EAAMuB,KAAKJ,EAAkB,GAAGK,IAAIC,EAAGN,EAAkB,GAAGK,IAAIE,EAAGP,EAAkB,GAAGK,IAAInB,MAAOc,EAAkB,GAAGK,IAAIlB,QAC5HN,EAAM2B,OAAO,GAAI,IACjB3B,EAAQA,EAAM4B,OAAOC,KAKrB7B,GADAA,GADAA,GADAA,GADAA,EAAQ8B,IAAY9B,EAAO,CAAC,GAAI,GAAI,KACtB+B,KAAK,IACLC,WAAW,IACXC,IAAI,MACJC,QAAQ,CAAC,EAAG,GAAI,GAAI,IAClC,IAAIC,EAASnB,EAAMoB,QAAQpC,GAC3BmC,EAASA,EAAOE,WAChBvC,EAASqC,UAKEG,IAAXxC,IACEyC,EAAc,CAAC,oBAAW,kBAAa,iBAAU,oBAAa,yBAAW,qBAAc,2BAAe,0BAEtGC,EAAM1C,EAAO2C,QAAO,SAAUxC,EAAGyC,GACnC,OAAOC,KAAKH,IAAIvC,EAAGyC,MAGjBE,EAAQ9C,EAAO+C,QAAQL,GAE3BM,EAAIC,OAAOR,EAAYK,IAAU,IAAMG,OAAOJ,KAAKK,MAAY,IAANR,IAAc,KAGnEhB,EAAML,EAAkB,GAAGK,IAC3ByB,EAAc,CAClBC,UAAW,EACXC,MAAOL,GAEO,IAAIvC,IAAa6C,QAAQ5B,EAAKyB,GAEtCI,KAAK1C,IAvFM,kBA2Fdb,GA3Fc,4CAAH,kE,kCCJTwD,MA1Bf,SAAaC,GACX,IAMMC,EAAYC,OAAOC,WAAWD,OAAOE,YAGzC,OAGE,yBAAKC,UAAU,kBAAkBC,MAAO,CAACxD,MAAMmD,EAAY,EAAI,MAAQ,SACrE,kBAAC,IAAD,CAASM,iBAAiB,aAAaC,OAAO,EAAOC,IAAKT,EAAMU,OAAQ5D,MAAM,OAAOC,OAAO,OAAOsD,UAAU,WAC7G,4BACEA,UAAU,iBACVI,IAAKT,EAAMW,iB,oCDnBK,WACxB,IAAMC,EAAS,UAAMC,GAAN,WAERC,QAAQC,IAAI,CACjB/D,IAAagE,iBAAiBC,YAAYL,KACzC7C,MAAK,WACNmD,QAAQC,IAAI,aEChBC,GCMEC,IAAQC,IACNC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KDqLWpC,MAtMf,WAUEqC,qBAAU,WACRC,IAAYtE,MAAK,WACfuE,GAAsB,GACtBC,SAED,IAKH,IAAMC,EAAe,SAAApF,GACnBA,EAAOqF,QACJ/E,WAAW,MACXC,UAAU,EAAG,EAAGP,EAAON,MAAOM,EAAOL,SAIpCwF,EAAa,WACjB,GAA6B,OAAX7B,EAAiB,CACjC,IAAMgC,EAAUC,YAAW,sBAAC,sBAAAjG,EAAA,sEACpBkG,IADoB,2CAEzB,KACH,OAAO,WACLJ,EAAa7B,GACbkC,cAAcH,IAGhB,OAAOF,EAAa7B,IAKlBiC,EAAQ,uCAAG,sCAAAlG,EAAA,yDACQ,OAAnBgE,EAAO+B,QADI,iCAEOjG,EAAYkE,EAAO+B,QAAQK,OAFlC,cAEP5F,EAFO,OAGT6F,EAAMrC,EAAO+B,QAAQO,gBAHZ,SAOO7F,EAClBuD,EAAO+B,QAAQK,MACfnC,EAAa8B,QACbvF,EACA,eACA6F,EACAvF,EACAC,GAdW,OAOTJ,EAPS,OAmBT2B,EAAc,CAAC,oBAAW,kBAAa,iBAAU,oBAAa,yBAAW,qBAAc,2BAAe,+BAE1FD,IAAZ1B,IACE4B,EAAM5B,EAAQ6B,QAAO,SAAUxC,EAAGyC,GACpC,OAAOC,KAAKH,IAAIvC,EAAGyC,MAEjBE,EAAQhC,EAAQiC,QAAQL,GAC5BgE,EAAUjE,EAAYK,KAGxB6D,EAAUhG,GA7BG,4CAAH,qDAiCVO,EAAQ,KAENwC,EAAcC,OAAOC,WAAaD,OAAOE,YAkBzCiC,EAAS,uCAAG,sBAAA3F,EAAA,yDAChBwE,QAAQC,IAAIjB,OAAOC,WAAY,iBAC3B,cAAeD,QAFH,0CAIE3B,IAAmB,yBAJrB,OAIZd,EAJY,8DAOZyD,QAAQC,IAAR,MAPY,UAQE5C,IApGD,0BA4FD,QAQZd,EARY,OASZyD,QAAQC,IAAI,OACZ1D,EAAM0F,KAAK,yBAVC,uCAgBdjC,QAAQkC,KAAK,4BAhBC,UAiBA7E,IA7GC,0BA4FD,QAiBdd,EAjBc,eAmBhB4F,GAAe,GACfnC,QAAQC,IAAI,gBApBI,yDAAH,qDAuBTT,EAAS4C,mBACT3C,EAAe2C,mBACf9F,EAAa8F,mBAxHN,EAyHeC,mBAAS,IAzHxB,mBAyHEL,GAzHF,aA0HuCK,oBAAS,GA1HhD,mBA0HNC,EA1HM,KA0HclB,EA1Hd,OA2HyBiB,oBAAS,GA3HlC,mBA2HOF,GA3HP,aA4HeE,mBAAS,IA5HxB,mBA4HEN,GA5HF,aA6HuBM,mBAAS,IA7HhC,gCA8HiBA,mBAAS,OA9H1B,mBA8HNd,EA9HM,aA+Hac,oBAAS,IA/HtB,mBA+HNT,EA/HM,aAgIWS,oBAAS,IAhIpB,mBAqIb,OArIa,UAsIX,6BACGC,GAAsB,yBAAKlD,MAAO,CAAEmD,UAAW,SAAUC,UAAW,SACnE,yBAAKX,IAAKY,QAKVH,GAAsB,6BAEtB,yBAAKnD,UAAU,YAEb,yBAAKC,MAAO,CAAEsD,WAAY,OAAQF,UAAW,QAC3C,wBAAIpD,MAAO,CAAEuD,SAAU,QAAvB,2DACA,6BAEA,yBAAKvD,MAAO,CAAEsD,WAAY3D,EAAc,EAAI,OAAS,YAkBzD,yBAAKI,UAAU,SAASyD,MAAM,UAC5B,yBAAKC,GAAG,aACN,yBAAKzD,MAAO,CAAE0D,QAASlB,EAAQ,QAAU,SACvC,kBAACmB,EAAD,CAAQvD,OAAQA,EAAQC,aAAcA,MAEtCmC,GAAS,yBAAKzC,UAAU,SAAS0C,IAAKN,MAQ5C,yBAAKpC,UAAU,cEtLH6D,QACW,cAA7BhE,OAAOiE,SAASC,UAEe,UAA7BlE,OAAOiE,SAASC,UAEhBlE,OAAOiE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7G,MAAK,SAAA8G,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.9bfb053c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.5780b10b.gif\";","import * as faceapi from \"face-api.js\";\nimport Jimp from \"jimp\";\nimport * as tf from \"@tensorflow/tfjs\"\n\n\nexport const loadModels = () => {\n  const MODEL_URL = `${process.env.PUBLIC_URL}/models`;\n\n  return Promise.all([\n    faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\n  ]).then(() => {\n    console.log(\"loaded\")\n  });\n};\n\nexport const detectFaces = async image => {\n  if (!image) {\n    return;\n  }\n\n  const imgSize = image.getBoundingClientRect();\n  const displaySize = { width: imgSize.width, height: imgSize.height };\n  if (displaySize.height === 0) {\n    return;\n  }\n\n  const faces = await faceapi\n    .detectAllFaces(\n      image,\n      new faceapi.TinyFaceDetectorOptions({ inputSize: 320 })\n    )\n\n  return faceapi.resizeResults(faces, displaySize);\n};\n\nvar result;\n\nexport const drawResults = async (image, canvas, results, type, tocrop, facecanvas, model) => {\n  if (image && canvas && results) {\n    const imgSize = image.getBoundingClientRect();\n    const displaySize = { width: imgSize.width, height: imgSize.height };\n    faceapi.matchDimensions(canvas, displaySize);\n    canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\n    var resizedDetections;\n    if (displaySize.width !== 0) {\n      resizedDetections = faceapi.resizeResults(results, displaySize);\n      if (resizedDetections[0]) {\n        Jimp.read(tocrop)\n          .then(image => {\n            image.crop(resizedDetections[0].box.x, resizedDetections[0].box.y, resizedDetections[0].box.width, resizedDetections[0].box.height);\n            image.resize(48, 48)\n            image = image.bitmap.data\n            image = tf.tensor3d(image, [48, 48, 4])\n            image = image.mean(2)\n            image = image.expandDims(2)\n            image = image.div(255)\n            image = image.reshape([1, 48, 48, 1])\n            var output = model.predict(image)\n            output = output.dataSync()\n            result = output\n          })\n\n        var l;\n\n        if (result !== undefined) {\n          var expressions = [\"giận dữ\", \"chán ghét\", \"sợ hãi\", \"hạnh phúc\", \"sầu đời\", \"ngạc nhiên\", \"bình thường\", \"khinh thường\"]\n\n          var max = result.reduce(function (a, b) {\n            return Math.max(a, b);\n          });\n\n          var index = result.indexOf(max);\n\n          l = String(expressions[index]) + \" \" + String(Math.round(max * 100)) + \"%\";\n        }\n\n        const box = resizedDetections[0].box\n        const drawOptions = {\n          lineWidth: 2,\n          label: l\n        }\n        const drawBox = new faceapi.draw.DrawBox(box, drawOptions)\n\n        drawBox.draw(canvas)\n\n      }\n\n      if (resizedDetections[1]) {\n        Jimp.read(tocrop)\n          .then(image => {\n            image.crop(resizedDetections[0].box.x, resizedDetections[0].box.y, resizedDetections[0].box.width, resizedDetections[0].box.height);\n            image.resize(48, 48)\n            image = image.bitmap.data\n            image = tf.tensor3d(image, [48, 48, 4])\n            image = image.mean(2)\n            image = image.expandDims(2)\n            image = image.div(255)\n            image = image.reshape([1, 48, 48, 1])\n            var output = model.predict(image)\n            output = output.dataSync()\n            result = output\n          })\n\n        var l;\n\n        if (result !== undefined) {\n          var expressions = [\"giận dữ\", \"chán ghét\", \"sợ hãi\", \"hạnh phúc\", \"sầu đời\", \"ngạc nhiên\", \"bình thường\", \"khinh thường\"]\n\n          var max = result.reduce(function (a, b) {\n            return Math.max(a, b);\n          });\n\n          var index = result.indexOf(max);\n\n          l = String(expressions[index]) + \" \" + String(Math.round(max * 100)) + \"%\";\n        }\n\n        const box = resizedDetections[0].box\n        const drawOptions = {\n          lineWidth: 2,\n          label: l\n        }\n        const drawBox = new faceapi.draw.DrawBox(box, drawOptions)\n\n        drawBox.draw(canvas)\n\n      }\n      \n      return result\n    }\n\n  }\n\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"../App.css\"\nimport Webcam from 'react-webcam'\n\n\n\n\nfunction App(props){\n  const videoConstraints = {\n    width: 720,\n    height: 1280,\n    facingMode: \"user\"\n  };\n\n  const aspectRatio=window.innerWidth/window.innerHeight\n \n\n    return(\n\n     \n      <div className=\"camera__wrapper\" style={{width:aspectRatio>1 ? \"80%\" : \"33vh\"}}>\n        <Webcam  screenshotFormat=\"image/jpeg\" audio={false} ref={props.camera} width=\"100%\" height=\"auto\" className=\"camera\" />\n        <canvas\n          className=\"webcam-overlay\"\n          ref={props.cameraCanvas}\n      \n        />\n        </div>\n    \n      \n    )\n}\n\nexport default App","import React, { useRef, useState, useEffect } from 'react';\nimport './App.css';\nimport { loadModels, detectFaces, drawResults } from \"./Face API/faceApi\";\nimport * as tf from '@tensorflow/tfjs';\nimport loading from './Assets/loading.gif'\nimport Camera from \"./Camera/Camera\"\nimport Switch from \"react-switch\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { createFaLibrary } from \"./icons\";\nimport ImageUploading from 'react-images-uploading'\n\n\nloadModels();\ncreateFaLibrary();\nfunction App() {\n\n  // const MODEL_PATH = './jsmodel/model.json';\n  const MODEL_PATH = './modelsjs2/model.json';\n\n  const INDEXEDDB_DB = 'tensorflowjs';\n  const INDEXEDDB_STORE = 'model_info_store';\n  const INDEXEDDB_KEY = 'web-model';\n\n  const photoMode = false\n  useEffect(() => {\n    loadmodel().then(() => {\n      setisDownloadingModel(false)\n      getResults()\n    })\n  }, []);\n\n\n\n\n  const clearOverlay = canvas => {\n    canvas.current\n      .getContext(\"2d\")\n      .clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n\n  const getResults = () => {\n    if (!photoMode && camera !== null) {\n      const ticking = setInterval(async () => {\n        await getFaces();\n      }, 200);\n      return () => {\n        clearOverlay(cameraCanvas);\n        clearInterval(ticking);\n      };\n    } else {\n      return clearOverlay(cameraCanvas);\n    }\n  }\n\n\n  const getFaces = async () => {\n    if (camera.current !== null) {\n      const faces = await detectFaces(camera.current.video);\n      var src = camera.current.getScreenshot();\n\n      \n\n      var results = await drawResults(\n        camera.current.video,\n        cameraCanvas.current,\n        faces,\n        \"boxLandmarks\",\n        src,\n        facecanvas,\n        model\n      )\n\n      // var expressions = ['bình thường', 'hạnh phúc', 'ngạc nhiên', 'buồn chán', 'tức giận', 'ngạc nhiên', 'sợ hãi', 'khinh thường']\n      // var expressions = [\"giận dữ\", \"chán ghét\", \"sợ hãi\", \"hạnh phúc\", \"sầu đời\", \"ngạc nhiên\", \"bình thường :D\", \"Khinh thường\"]\n      var expressions = [\"giận dữ\", \"chán ghét\", \"sợ hãi\", \"hạnh phúc\", \"sầu đời\", \"ngạc nhiên\", \"bình thường\", \"khinh thường\"]\n\n      if (results !== undefined) {\n        var max = results.reduce(function (a, b) {\n          return Math.max(a, b);\n        });\n        var index = results.indexOf(max);\n        setoutput(expressions[index]);\n\n      }\n      setResult(faces);\n    }\n\n  };\n  var model = null\n  var modelLastUpdated = null;\n  const aspectRatio = window.innerWidth / window.innerHeight\n\n  const getExpression = () => {\n    setexpression(output)\n    if (camera) {\n      var src = camera.current.getScreenshot();\n    }\n    setvideo(false)\n    setcurrent(src)\n\n\n  }\n\n  const reCapture = () => {\n    setvideo(true)\n  }\n\n\n  const loadmodel = async () => {\n    console.log(window.innerWidth, \"innnnnnnner\")\n    if ('indexedDB' in window) {\n      try {\n        model = await tf.loadLayersModel('indexeddb://' + INDEXEDDB_KEY);\n      }\n      catch (e) {\n        console.log(e)\n        model = await tf.loadLayersModel(MODEL_PATH);\n        console.log(\"???\");\n        model.save('indexeddb://' + INDEXEDDB_KEY)\n\n      }\n    }\n    // If no IndexedDB, then just download like normal.\n    else {\n      console.warn('IndexedDB not supported.');\n      model = await tf.loadLayersModel(MODEL_PATH);\n    }\n    setmodelLoaded(true)\n    console.log(\"model loaded\")\n  }\n\n  const camera = useRef();\n  const cameraCanvas = useRef();\n  const facecanvas = useRef()\n  const [result, setResult] = useState([]);\n  const [isDownloadingModel, setisDownloadingModel] = useState(true)\n  const [modelLoaded, setmodelLoaded] = useState(false)\n  const [output, setoutput] = useState(\"\")\n  const [expression, setexpression] = useState(\"\")\n  const [current, setcurrent] = useState(null)\n  const [video, setvideo] = useState(true)\n  const [mode, setMode] = useState(false)\n\n  var indents = [];\n  indents = [\"giận dữ\", \"chán ghét\", \"sợ hãi\", \"hạnh phúc\", \"sầu đời\", \"ngạc nhiên\", \"bình thường\", \"khinh thường\"];\n\n  return (\n    <div>\n      {isDownloadingModel && <div style={{ textAlign: \"center\", marginTop: \"30vh\" }}>\n        <img src={loading} />\n        {/* <h2 style={{ color: \"#007c6c\" }}>Đang tải model</h2> */}\n\n      </div>}\n\n      {!isDownloadingModel && <div>\n\n        <div className=\"titleDiv\">\n\n          <div style={{ marginLeft: \"10px\", marginTop: \"1vh\" }}>\n            <h4 style={{ fontSize: \"4vh\" }}>Nhận diện cảm xúc con người</h4>\n            <br />\n\n            <div style={{ marginLeft: aspectRatio > 1 ? \"92vw\" : \"80vw\" }}>\n              {/* <Switch\n                onChange={() => { setMode(!mode); reCapture() }}\n                uncheckedIcon={<FontAwesomeIcon style={{ marginLeft: \"8px\", marginTop: \"5px\" }} icon=\"video\" />}\n                checkedIcon={<FontAwesomeIcon style={{ marginLeft: \"10px\", marginTop: \"5px\" }} icon=\"camera\" />}\n                checked={!mode}\n                className=\"App__switcher-switch\"\n                offColor={\"#b3f5e5\"}\n                onColor={\"#b3f5e5\"}\n                width={60}\n              /> */}\n            </div>\n\n          </div>\n        </div>\n\n\n\n        <div className=\"camera\" align=\"center\">\n          <div id=\"cam_input\">\n            <div style={{ display: video ? \"block\" : \"none\" }}>\n              <Camera camera={camera} cameraCanvas={cameraCanvas} />\n            </div>\n            {!video && <img className=\"camera\" src={current} />}\n          </div>\n          {/* {!mode && <div>\n            {video && <button style={{ width: aspectRatio > 1 ? (window.innerWidth / 100) * 80 : \"33vh\" }} className=\"detect\" onClick={() => getExpression()}>Chụp ảnh</button>}\n            {!video && <button style={{ width: aspectRatio > 1 ? (window.innerWidth / 100) * 80 : \"33vh\" }} className=\"detect\" onClick={() => reCapture()}>Thử lại</button>}\n          </div>} */}\n        </div>\n\n        <div className=\"footer\">\n          {/* <ul>\n            {indents.map(reptile => (\n              <li key={reptile}>{reptile}</li>\n            ))}\n          </ul> */}\n          {/* {mode && output !== \"\" && <h3>Bạn trông như {output}.</h3>}\n          {!mode && expression !== \"\" && <h3>Bạn trông như  {expression}.</h3>} */}\n        </div>\n\n\n      </div>}\n    </div>\n\n  );\n\n}\n\nexport default App;\n","import {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faVideo,\n  faCamera,\n  faSpinner,\n  faAngry,\n  faGrinTongueSquint,\n  faGrimace,\n  faGrin,\n  faMeh,\n  faSadTear,\n  faSurprise,\n  faMale,\n  faFemale,\n  faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport const createFaLibrary = () => {\n  library.add(\n    faVideo,\n    faCamera,\n    faSpinner,\n    faAngry,\n    faGrinTongueSquint,\n    faGrimace,\n    faGrin,\n    faMeh,\n    faSadTear,\n    faSurprise,\n    faMale,\n    faFemale,\n    faTimesCircle\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}