{"version":3,"sources":["Assets/loading.gif","Face API/faceApi.js","Camera/Camera.js","App.js","icons.js","serviceWorker.js","index.js"],"names":["module","exports","result","detectFaces","image","a","imgSize","getBoundingClientRect","displaySize","width","height","faceapi","inputSize","faces","drawResults","canvas","results","type","tocrop","facecanvas","model","getContext","clearRect","resizedDetections","box","drawOptions","lineWidth","DrawBox","draw","Jimp","read","then","crop","x","y","resize","bitmap","data","tf","mean","expandDims","div","reshape","output","predict","dataSync","App","props","aspectRatio","window","innerWidth","innerHeight","className","style","screenshotFormat","audio","ref","camera","cameraCanvas","MODEL_URL","process","Promise","all","tinyFaceDetector","loadFromUri","console","log","loadModels","library","add","faVideo","faCamera","faSpinner","faAngry","faGrinTongueSquint","faGrimace","faGrin","faMeh","faSadTear","faSurprise","faMale","faFemale","faTimesCircle","useEffect","loadmodel","setisDownloadingModel","getResults","clearOverlay","current","ticking","setInterval","getFaces","clearInterval","video","src","getScreenshot","expressions","undefined","max","reduce","b","Math","index","indexOf","setoutput","setResult","reCapture","setvideo","save","warn","setmodelLoaded","useRef","useState","isDownloadingModel","expression","setexpression","setcurrent","mode","setMode","textAlign","marginTop","loading","color","marginLeft","fontSize","href","onChange","uncheckedIcon","icon","checkedIcon","checked","offColor","onColor","align","id","display","Camera","onClick","getExpression","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.605c0c84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.5ce78eb5.gif\";","import * as faceapi from \"face-api.js\";\nimport Jimp from \"jimp\";\nimport * as tf from \"@tensorflow/tfjs\"\n\n\n\nexport const loadModels = () => {\n  const MODEL_URL = `${process.env.PUBLIC_URL}/models`;\n\n  return Promise.all([\n    faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\n  ]).then(()=>{\n    console.log(\"loaded\")\n  });\n};\n\nexport const detectFaces = async image => {\n  if (!image) {\n    return;\n  }\n\n  const imgSize = image.getBoundingClientRect();\n  const displaySize = {width: imgSize.width, height: imgSize.height};\n  if (displaySize.height === 0) {\n    return;\n  }\n\n  const faces = await faceapi\n    .detectAllFaces(\n      image,\n      new faceapi.TinyFaceDetectorOptions({inputSize: 320})\n    )\n\n  return faceapi.resizeResults(faces, displaySize);\n};\n\nvar result;\n\nexport const drawResults = async (image, canvas, results, type,tocrop,facecanvas,model) => {\n  if (image && canvas && results) {\n    const imgSize = image.getBoundingClientRect();\n    const displaySize = {width: imgSize.width, height: imgSize.height};\n    faceapi.matchDimensions(canvas, displaySize);\n    canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\n    var resizedDetections;\n    if(displaySize.width!==0){\n    resizedDetections = faceapi.resizeResults(results, displaySize);  \n    if(resizedDetections[0]){\n    const box =resizedDetections[0].box\n    const drawOptions = {\n      lineWidth: 2\n    }\n    const drawBox = new faceapi.draw.DrawBox(box, drawOptions)\n    drawBox.draw(canvas)\n  \n\nJimp.read(tocrop)\n .then(image => {\n   image.crop( resizedDetections[0].box.x, resizedDetections[0].box.y, resizedDetections[0].box.width,resizedDetections[0].box.height ); \n   image.resize(48,48)\nimage=image.bitmap.data\nimage = tf.tensor3d(image,[48,48,4])\nimage = image.mean(2)\nimage = image.expandDims(2)\nimage = image.div(255)\nimage = image.reshape([1,48,48,1])\nvar output = model.predict(image)\noutput = output.dataSync()\nresult = output\n})\n}\n  return result \n      }\n    \n  }\n  \n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"../App.css\"\nimport Webcam from 'react-webcam'\n\n\n\n\nfunction App(props){\n  const videoConstraints = {\n    width: 720,\n    height: 1280,\n    facingMode: \"user\"\n  };\n\n  const aspectRatio=window.innerWidth/window.innerHeight\n \n\n    return(\n\n     \n      <div className=\"camera__wrapper\" style={{width:aspectRatio>1 ? \"80%\" : \"33vh\"}}>\n        <Webcam  screenshotFormat=\"image/jpeg\" audio={false} ref={props.camera} width=\"100%\" height=\"auto\" className=\"camera\" />\n        <canvas\n          className=\"webcam-overlay\"\n          ref={props.cameraCanvas}\n      \n        />\n        </div>\n    \n      \n    )\n}\n\nexport default App","import React, { useRef, useState, useEffect } from 'react';\nimport './App.css';\nimport { loadModels, detectFaces, drawResults } from \"./Face API/faceApi\";\nimport * as tf from '@tensorflow/tfjs';\nimport loading from './Assets/loading.gif'\nimport Camera from \"./Camera/Camera\"\nimport Switch from \"react-switch\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { createFaLibrary } from \"./icons\";\n\n\n\n\n\n\nloadModels();\ncreateFaLibrary();\nfunction App() {\n\n  const MODEL_PATH = './jsmodel/model.json';\n\n  const INDEXEDDB_DB = 'tensorflowjs';\n  const INDEXEDDB_STORE = 'model_info_store';\n  const INDEXEDDB_KEY = 'web-model';\n\n  const photoMode = false\n  useEffect(() => {\n    loadmodel().then(() => {\n      setisDownloadingModel(false)\n      getResults()\n    })\n  }, []);\n\n\n\n\n  const clearOverlay = canvas => {\n    canvas.current\n      .getContext(\"2d\")\n      .clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n\n  const getResults = () => {\n    if (!photoMode && camera !== null) {\n      const ticking = setInterval(async () => {\n        await getFaces();\n      }, 200);\n      return () => {\n        clearOverlay(cameraCanvas);\n        clearInterval(ticking);\n      };\n    } else {\n      return clearOverlay(cameraCanvas);\n    }\n  }\n\n\n  const getFaces = async () => {\n    if (camera.current !== null) {\n      const faces = await detectFaces(camera.current.video);\n      var src = camera.current.getScreenshot();\n      var results = await drawResults(\n        camera.current.video,\n        cameraCanvas.current,\n        faces,\n        \"boxLandmarks\",\n        src,\n        facecanvas,\n        model\n      )\n\n      var expressions = [\"angry\", \"disgusted\", \"afraid\", \"happy\", \"sad\", \"surprised\", \"neutral\"]\n\n      if (results !== undefined) {\n        var max = results.reduce(function (a, b) {\n          return Math.max(a, b);\n        });\n        var index = results.indexOf(max)\n        setoutput(expressions[index])\n\n      }\n      setResult(faces);\n\n    }\n  };\n  var model = null\n  var modelLastUpdated = null;\n  const aspectRatio = window.innerWidth / window.innerHeight\n\n  const getExpression = () => {\n    setexpression(output)\n    if (camera) {\n      var src = camera.current.getScreenshot();\n    }\n    setvideo(false)\n    setcurrent(src)\n\n\n  }\n\n  const reCapture = () => {\n    setvideo(true)\n  }\n\n\n\n  const loadmodel = async () => {\n    console.log(window.innerWidth, \"innnnnnnner\")\n    if ('indexedDB' in window) {\n      try {\n        model = await tf.loadLayersModel('indexeddb://' + INDEXEDDB_KEY);\n\n      }\n      catch (e) {\n        console.log(e)\n        model = await tf.loadLayersModel(MODEL_PATH);\n        model.save('indexeddb://' + INDEXEDDB_KEY)\n\n      }\n    }\n    // If no IndexedDB, then just download like normal.\n    else {\n      console.warn('IndexedDB not supported.');\n      model = await tf.loadLayersModel(MODEL_PATH);\n    }\n    setmodelLoaded(true)\n    console.log(\"model loaded\")\n  }\n\n\n\n  const camera = useRef();\n  const cameraCanvas = useRef();\n  const facecanvas = useRef()\n  const [result, setResult] = useState([]);\n  const [isDownloadingModel, setisDownloadingModel] = useState(true)\n  const [modelLoaded, setmodelLoaded] = useState(false)\n  const [output, setoutput] = useState(\"\")\n  const [expression, setexpression] = useState(\"\")\n  const [current, setcurrent] = useState(null)\n  const [video, setvideo] = useState(true)\n  const [mode, setMode] = useState(false)\n\n\n  return (\n\n\n    <div>\n      {isDownloadingModel && <div style={{ textAlign: \"center\", marginTop: \"30vh\" }}>\n        <img src={loading} />\n        <h2 style={{ color: \"#007c6c\" }}>Downloading Model</h2>\n\n      </div>}\n\n      {!isDownloadingModel && <div>\n\n        <div className=\"titleDiv\">\n\n          <div style={{ marginLeft: \"10px\", marginTop: \"1vh\" }}>\n            <h4 style={{ fontSize: \"4vh\" }}>Facial Emotion Detector</h4>\n\n\n\n            <a className=\"nostyle\" href={\"https://github.com/amilkh/cs230-fer\"}>Deep learning model</a>\n            <p className=\"nostyle\">&nbsp;by&nbsp;</p>\n            <a className=\"nostyle\" href={\"https://cs230.stanford.edu/\"}>Stanford University</a>\n            <br />\n\n\n\n            <a className=\"nostyle\" href={\"https://github.com/amilkh/cs230-fer/tree/master/webapp\"}>Web app</a>\n            <p className=\"nostyle\">&nbsp;by&nbsp;</p>\n            <a className=\"nostyle\" href={\"https://se.neduet.edu.pk/\"}>NED University</a>\n\n\n\n            <div style={{ marginLeft: aspectRatio > 1 ? \"92vw\" : \"80vw\" }}>\n              <Switch\n                onChange={() => { setMode(!mode); reCapture() }}\n                uncheckedIcon={<FontAwesomeIcon style={{ marginLeft: \"8px\", marginTop: \"5px\" }} icon=\"video\" />}\n                checkedIcon={<FontAwesomeIcon style={{ marginLeft: \"10px\", marginTop: \"5px\" }} icon=\"camera\" />}\n                checked={!mode}\n                className=\"App__switcher-switch\"\n                offColor={\"#b3f5e5\"}\n                onColor={\"#b3f5e5\"}\n                width={60}\n              />\n            </div>\n\n          </div>\n\n\n\n\n\n\n\n        </div>\n\n\n\n        <div className=\"camera\" align=\"center\">\n          <div id=\"cam_input\">\n            <div style={{ display: video ? \"block\" : \"none\" }}>\n              <Camera camera={camera} cameraCanvas={cameraCanvas} />\n            </div>\n            {!video && <img className=\"camera\" src={current} />}\n          </div>\n          {!mode && <div>\n            {video && <button style={{ width: aspectRatio > 1 ? (window.innerWidth / 100) * 80 : \"33vh\" }} className=\"detect\" onClick={() => getExpression()}>Detect My Emotion</button>}\n            {!video && <button style={{ width: aspectRatio > 1 ? (window.innerWidth / 100) * 80 : \"33vh\" }} className=\"detect\" onClick={() => reCapture()}>Capture Again</button>}\n          </div>}\n        </div>\n\n\n\n\n        <div className=\"footer\">\n          {mode && output !== \"\" && <h3>I think you look {output}.</h3>}\n          {!mode && expression !== \"\" && <h3>I think you look {expression}.</h3>}\n\n        </div>\n\n\n      </div>}\n    </div>\n\n  );\n\n}\n\nexport default App;\n","import {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faVideo,\n  faCamera,\n  faSpinner,\n  faAngry,\n  faGrinTongueSquint,\n  faGrimace,\n  faGrin,\n  faMeh,\n  faSadTear,\n  faSurprise,\n  faMale,\n  faFemale,\n  faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport const createFaLibrary = () => {\n  library.add(\n    faVideo,\n    faCamera,\n    faSpinner,\n    faAngry,\n    faGrinTongueSquint,\n    faGrimace,\n    faGrin,\n    faMeh,\n    faSadTear,\n    faSurprise,\n    faMale,\n    faFemale,\n    faTimesCircle\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}